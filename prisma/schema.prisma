// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


enum UserRole {
  SUPERADMIN
  ADMIN
}

model Admin {  
    id        String   @id @default(auto()) @map("_id") @db.ObjectId  
    email     String   @unique  
    name      String
    password  String
    role      UserRole @default(ADMIN)
    createdAt DateTime @default(now())  
    updatedAt DateTime @updatedAt
    
    @@map("admins")
}

model SocialProfile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slug      String   @unique
  value     String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social_profiles")
}

model OrganisationDetails {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  singletonKey           String   @unique @default("singleton")
  address                String   @default("")
  emails                 String[] @default([])
  phones                 String[] @default([])
  locationMapUrl         String   @default("")
  companyTagline         String   @default("")
  vision  String         @default("")
  mission String         @default("")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("organisation_details")
}

model HomepageSection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sectionKey  String   @unique  // e.g., "hero", "about", "features", etc.
  data        Json     // Completely flexible JSON structure for each section
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("homepage_sections")
}

model NewsletterSubscription {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  isActive    Boolean  @default(true)
  subscribedAt DateTime @default(now())
  unsubscribedAt DateTime?
  source      String?  // Optional: track where the subscription came from
  
  @@map("newsletter_subscriptions")
}

model LatestUpdate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  category  String
  title     String
  btnTitle  String
  link      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("latest_updates")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  videos      Video[]  @relation(fields: [videoIds], references: [id])
  videoIds    String[] @db.ObjectId

  @@map("categories")
}

model Video {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  subtitle    String?
  description String
  link        String
  date        DateTime
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[]   @db.ObjectId

  @@map("videos")
}